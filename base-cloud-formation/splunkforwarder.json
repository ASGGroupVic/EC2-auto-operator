{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"setup splunkforwarder instance",
  "Parameters":{
    "environment":{
      "Description":"The 'human' name of the environment you want to deploy to.",
      "Type":"String",
      "AllowedValues":[
        "dev",
        "prod"
      ],
      "Default":"dev"
    },
    "ami":{
      "Description":"The latest AMI Id of the GIA splunkforwarder",
      "Type":"String"
    },
    "size":{
      "Description":"The size of the EBS volume you want to create (in GB)",
      "Type":"Number",
      "MinValue":"10",
      "MaxValue":"200",
      "Default":"20"
    },
    "instanceType":{
      "Description":"The type of the EC2 instance you want",
      "Type":"String",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m4.large"
      ],
      "Default":"t2.micro"
    },
    "name": {
      "Description": "The name of this stack",
      "Type": "String",
      "Default": "splunkfw-rd"
    },
    "SplunkPort": {
      "Description": "the port that splunk forwarder listens to",
      "Type": "Number",
      "Default": 9997
    },
    "SplunkIndex": {
      "Description": "The index which Splunk itself logs as (not the messages it forwards)",
      "Type": "String",
      "Default": "resi-data"
    },
    "SplunkIndexerHost": {
      "Description": "the url of the splunk server we wish to forward to",
      "Type": "String"
    },
    "SplunkIndexerPort": {
      "Description": "the port of the splunk server we wish to forward to",
      "Type": "Number",
      "Default": 443
    },
    "splunkforwarderClientCert": {
      "Description": "Splunk forwarder client cert",
      "Type": "String"
    },
    "caCertificateChain": {
      "Description": "CA certificate chain (for client cert)",
      "Type": "String"
    },
    "resiCaCert": {
      "Description": "Resi Certificate Authority cert",
      "Type": "String"
    }
  },
  "Mappings": {
    "VpcMap": {
      "dev": {
        "vpc": "vpc-e702ad82",
        "privateSubnets": [
          "subnet-68be310d",
          "subnet-d30cb9a4"
        ],
        "svcssubnet": [
          "subnet-6abe310f",
          "subnet-d20cb9a5"
        ],
        "availabilityZones": [
          "ap-southeast-2a",
          "ap-southeast-2b"
        ],
        "keyNamePrefix": "resi-data",
        "hostedZoneName": "resi-data-dev.realestate.com.au.",
        "email": "resi-data-dev@rea-group.com"
      },
      "prod": {
        "vpc": "vpc-b90f86dc",
        "privateSubnets": [
          "subnet-7e019c09",
          "subnet-e975028c"
        ],
        "svcssubnet": [
          "subnet-7c019c0b",
          "subnet-e875028d"
        ],
        "availabilityZones": [
          "ap-southeast-2a",
          "ap-southeast-2b"
        ],
        "keyNamePrefix": "residata",
        "hostedZoneName": "resi-data-prod.realestate.com.au.",
        "email": "resi-data-prod@rea-group.com"
      }
    }
  },
  "Resources":{
    "SplunkforwarderSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Security group for Splunkforwarder",
        "VpcId":{
          "Fn::FindInMap":[
            "VpcMap",
            {
              "Ref":"environment"
            },
            "vpc"
          ]
        },
        "SecurityGroupIngress":[
          {
            "CidrIp":"0.0.0.0/0",
            "IpProtocol":"icmp",
            "FromPort":"-1",
            "ToPort":"-1"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"22",
            "ToPort":"22",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"8000",
            "ToPort":"8000",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"8089",
            "ToPort":"8089",
            "CidrIp":"0.0.0.0/0"
          },
          {
            "IpProtocol":"tcp",
            "FromPort":"9997",
            "ToPort":"9997",
            "CidrIp":"0.0.0.0/0"
          }
        ]
      }
    },
    "ELBSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Security group for Splunk Forwarder ELB",
        "VpcId":{
          "Fn::FindInMap":[
            "VpcMap",
            {
              "Ref":"environment"
            },
            "vpc"
          ]
        },
        "SecurityGroupIngress":[
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": {
              "Ref": "SplunkPort"
            },
            "IpProtocol": "tcp",
            "ToPort": {
              "Ref": "SplunkPort"
            }
          }
        ]
      }
    },
    "SplunkRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
              }
            ]
          },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"splunk-policy",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:DescribeStackResource",
                    "ec2:CreateSnapshot",
                    "ec2:DescribeSnapshots"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "SplunkProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"SplunkRole"
          }
        ]
      }
    },
    "SplunkELB":{
      "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties":{
        "CrossZone": true,
        "Subnets":
        {
          "Fn::FindInMap": [
            "VpcMap",
            {
              "Ref": "environment"
            },
            "svcssubnet"
          ]
        },
        "Scheme":"internal",
        "HealthCheck":{
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "SplunkPort"
                }
              ]
            ]
          },
          "Interval":"15",
          "HealthyThreshold":"2",
          "Timeout":"10",
          "UnhealthyThreshold":"6"
        },
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "SplunkPort"
            },
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": {
              "Ref": "SplunkPort"
            },
            "Protocol": "TCP"
          }
        ],
        "SecurityGroups":[
          {
            "Ref":"ELBSecurityGroup"
          }
        ]
      }
    },
    "SplunkForwarderAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::FindInMap": [
            "VpcMap",
            {
              "Ref": "environment"
            },
            "availabilityZones"
          ]
        },
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "300",
        "TerminationPolicies": ["OldestInstance"],
        "LaunchConfigurationName": {
          "Ref": "SplunkForwarderLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "SplunkELB"
          }
        ],
        "MinSize": "1",
        "DesiredCapacity": "1",
        "MaxSize": "1",
        "VPCZoneIdentifier": {
          "Fn::FindInMap": [
            "VpcMap",
            {
              "Ref": "environment"
            },
            "privateSubnets"
          ]
        },
        "Tags": [
          {
            "Key": "CloudFormationStack",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "lob",
            "Value": "Resi",
            "PropagateAtLaunch": true
          },
          {
            "Key": "node_name",
            "Value": {
              "Ref": "name"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": {
            "Ref": "name"
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "SplunkForwarderLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": {
          "Ref": "SplunkProfile"
        },
        "ImageId": {
          "Ref": "ami"
        },
        "InstanceType": {
          "Ref": "instanceType"
        },
        "KeyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::FindInMap": [
                  "VpcMap",
                  {
                    "Ref": "environment"
                  },
                  "keyNamePrefix"
                ]
              },
              "ap-southeast-2"
            ]
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "SplunkforwarderSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -e\n",
                "\n",
                "/opt/aws/bin/cfn-init -s ",
                {"Ref": "AWS::StackId"},
                " -r SplunkForwarderLaunchConfiguration ",
                " --region ",
                {"Ref": "AWS::Region"},
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/ntp.conf": {
                "mode": "0644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    " \n",
                    [
                      "server 0.amazon.pool.ntp.org iburst",
                      "server 1.amazon.pool.ntp.org iburst",
                      "server 2.amazon.pool.ntp.org iburst",
                      "server 3.amazon.pool.ntp.org iburst"
                    ]
                  ]
                }
              },
              "/opt/splunkforwarder/etc/system/local/inputs.conf": {
                "mode": "0644",
                "owner": "splunk",
                "group": "splunk",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "index = ",
                      {
                        "Ref": "SplunkIndex"
                      },
                      "\n",
                      "[monitor:///var/log/boot.log]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/cfn-init.log]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/cfn-init-cmd.log]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/cron.log]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/dmesg]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/maillog]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/messages]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/secure]\n",
                      "ignoreOlderThan = 1d\n",
                      "[monitor:///var/log/yum.log]\n",
                      "ignoreOlderThan = 1d\n",
                      "[splunktcp:",
                      {
                        "Ref": "SplunkPort"
                      },
                      "]\n",
                      "\n",
                      "[SSL]\n",
                      "requireClientCert = false\n"
                    ]
                  ]
                }
              },
              "/opt/splunkforwarder/etc/system/local/outputs.conf": {
                "mode": "0644",
                "owner": "splunk",
                "group": "splunk",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[tcpout:splunkssl]\n",
                      "server = ",
                      {
                        "Ref": "SplunkIndexerHost"
                      },
                      ":",
                      {
                        "Ref": "SplunkIndexerPort"
                      },
                      "\n",
                      "compressed = true\n",
                      "sslVerifyServerCert = true\n",
                      "sslRootCAPath = /opt/splunk/etc/certs/cacert.pem\n",
                      "sslCertPath = /opt/splunk/etc/certs/server.pem\n"
                    ]
                  ]
                }
              },
              "/opt/splunkforwarder/etc/system/local/server.conf": {
                "mode": "0644",
                "owner": "splunk",
                "group": "splunk",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "serverName = $HOSTNAME\n",
                      "\n",
                      "[lmpool:auto_generated_pool_forwarder]\n",
                      "description = auto_generated_pool_forwarder\n",
                      "quota = MAX\n",
                      "slaves = *\n",
                      "stack_id = forwarder\n",
                      "\n",
                      "[lmpool:auto_generated_pool_free]\n",
                      "description = auto_generated_pool_free\n",
                      "quota = MAX\n",
                      "slaves = *\n",
                      "stack_id = free\n",
                      "\n",
                      "[sslConfig]\n",
                      "caPath = /opt/splunkforwarder/etc/certs\n"
                    ]
                  ]
                }
              },
              "/opt/splunkforwarder/etc/certs/server.pem": {
                "mode": "0400",
                "owner": "splunk",
                "group": "splunk",
                "content": {
                  "Ref": "splunkforwarderClientCert"
                }
              },
              "/opt/splunkforwarder/etc/certs/cacert.pem": {
                "mode": "0400",
                "owner": "splunk",
                "group": "splunk",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      {
                        "Ref": "resiCaCert"
                      },
                      {
                        "Ref": "caCertificateChain"
                      }
                    ]
                  ]
                }
              }
            },
            "commands": {
              "a_restart_splunk": {
                "command": "/opt/splunkforwarder/bin/splunk restart",
                "ignoreErrors": "true"
              }
            }
          }
        }
      }
    },
    "splunkForwarderCNAME": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::FindInMap": [
            "VpcMap",
            {
              "Ref": "environment"
            },
            "hostedZoneName"
          ]
        },
        "Comment":"DNS name for Splunkforwarder.",
        "Name": {
          "Fn::Join": [
            ".",
            [
              "splunkfw-rd",
              {
                "Fn::FindInMap": [
                  "VpcMap",
                  {
                    "Ref": "environment"
                  },
                  "hostedZoneName"
                ]
              }
            ]
          ]
        },
        "Type": "CNAME",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "SplunkELB",
              "DNSName"
            ]
          }
        ]
      }
    }
  },
    "Outputs": {
      "elbCNAME": {
        "Value": {
          "Ref": "splunkForwarderCNAME"
        }
      }
    }
  }
